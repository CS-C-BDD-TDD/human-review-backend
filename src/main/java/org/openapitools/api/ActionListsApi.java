/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;

import org.openapitools.model.humanreview.ActionList;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-11T09:52:13.189-04:00[America/New_York]")

@Validated
@Api(value = "actionLists", description = "the actionLists API")
public interface ActionListsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Create a ActionList", nickname = "createActionList", notes = "Creates a new instance of a `ActionList`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.") })
    @RequestMapping(value = "/actionLists",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createActionList(@ApiParam(value = "A new `ActionList` to be created." ,required=true )  @Valid @RequestBody ActionList actionList) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete a ActionList", nickname = "deleteActionList", notes = "Deletes an existing `ActionList`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/actionLists/{actionListId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteActionList(@ApiParam(value = "A unique identifier for a `ActionList`.",required=true) @PathVariable("actionListId") String actionListId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get a ActionList", nickname = "getActionList", notes = "Gets the details of a single instance of a `ActionList`.", response = ActionList.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `ActionList`.", response = ActionList.class) })
    @RequestMapping(value = "/actionLists/{actionListId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ActionList> getActionList(@ApiParam(value = "A unique identifier for a `ActionList`.",required=true) @PathVariable("actionListId") String actionListId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"actions\" : [ \"actions\", \"actions\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List All ActionLists", nickname = "getActionLists", notes = "Gets a list of all `ActionList` entities.", response = ActionList.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `ActionList` entities.", response = ActionList.class, responseContainer = "List") })
    @RequestMapping(value = "/actionLists",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ActionList>> getActionLists() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"actions\" : [ \"actions\", \"actions\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update a ActionList", nickname = "updateActionList", notes = "Updates an existing `ActionList`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response.") })
    @RequestMapping(value = "/actionLists/{actionListId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateActionList(@ApiParam(value = "A unique identifier for a `ActionList`.",required=true) @PathVariable("actionListId") String actionListId,@ApiParam(value = "Updated `ActionList` information." ,required=true )  @Valid @RequestBody ActionList actionList) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
